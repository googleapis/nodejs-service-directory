// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import {RequestType} from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import * as gapicConfig from './registration_service_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Service Directory API for registering services. It defines the following
 *  resource model:
 *
 *  - The API has a collection of
 *  {@link google.cloud.servicedirectory.v1beta1.Namespace|Namespace}
 *  resources, named `projects/* /locations/* /namespaces/*`.
 *
 *  - Each Namespace has a collection of
 *  {@link google.cloud.servicedirectory.v1beta1.Service|Service} resources, named
 *  `projects/* /locations/* /namespaces/* /services/*`.
 *
 *  - Each Service has a collection of
 *  {@link google.cloud.servicedirectory.v1beta1.Endpoint|Endpoint}
 *  resources, named
 *  `projects/* /locations/* /namespaces/* /services/* /endpoints/*`.
 * @class
 * @memberof v1beta1
 */
export class RegistrationServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  registrationServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of RegistrationServiceClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof RegistrationServiceClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;

    // users can override the config from client side, like retry codes name.
    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546
    // The way to override client config for Showcase API:
    //
    // const customConfig = {"interfaces": {"google.showcase.v1beta1.Echo": {"methods": {"Echo": {"retry_codes_name": "idempotent", "retry_params_name": "default"}}}}}
    // const showcaseClient = new showcaseClient({ projectId, customConfig });
    opts.clientConfig = opts.clientConfig || {};

    // If we're running in browser, it's OK to omit `fallback` since
    // google-gax has `browser` field in its `package.json`.
    // For Electron (which does not respect `browser` field),
    // pass `{fallback: true}` to the RegistrationServiceClient constructor.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof RegistrationServiceClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback
        ? // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      endpointPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}/endpoints/{endpoint}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      namespacePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/namespaces/{namespace}'
      ),
      servicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listNamespaces: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'namespaces'
      ),
      listServices: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'services'
      ),
      listEndpoints: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'endpoints'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.servicedirectory.v1beta1.RegistrationService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.registrationServiceStub) {
      return this.registrationServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.servicedirectory.v1beta1.RegistrationService.
    this.registrationServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.servicedirectory.v1beta1.RegistrationService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.servicedirectory.v1beta1
            .RegistrationService,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const registrationServiceStubMethods = [
      'createNamespace',
      'listNamespaces',
      'getNamespace',
      'updateNamespace',
      'deleteNamespace',
      'createService',
      'listServices',
      'getService',
      'updateService',
      'deleteService',
      'createEndpoint',
      'listEndpoints',
      'getEndpoint',
      'updateEndpoint',
      'deleteEndpoint',
      'getIamPolicy',
      'setIamPolicy',
      'testIamPermissions',
    ];
    for (const methodName of registrationServiceStubMethods) {
      const callPromise = this.registrationServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        this.descriptors.page[methodName] ||
          this.descriptors.stream[methodName] ||
          this.descriptors.longrunning[methodName]
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.registrationServiceStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'servicedirectory.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'servicedirectory.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.ICreateNamespaceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      (
        | protos.google.cloud.servicedirectory.v1beta1.ICreateNamespaceRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.ICreateNamespaceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      | protos.google.cloud.servicedirectory.v1beta1.ICreateNamespaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.ICreateNamespaceRequest,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      | protos.google.cloud.servicedirectory.v1beta1.ICreateNamespaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates a namespace, and returns the new Namespace.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the project and location the namespace
   *   will be created in.
   * @param {string} request.namespaceId
   *   Required. The Resource ID must be 1-63 characters long, and comply with
   *   <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
   *   Specifically, the name must be 1-63 characters long and match the regular
   *   expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
   *   character must be a lowercase letter, and all following characters must
   *   be a dash, lowercase letter, or digit, except the last character, which
   *   cannot be a dash.
   * @param {google.cloud.servicedirectory.v1beta1.Namespace} request.namespace
   *   Required. A namespace with initial fields set.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Namespace]{@link google.cloud.servicedirectory.v1beta1.Namespace}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.ICreateNamespaceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.servicedirectory.v1beta1.INamespace,
          | protos.google.cloud.servicedirectory.v1beta1.ICreateNamespaceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      | protos.google.cloud.servicedirectory.v1beta1.ICreateNamespaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      (
        | protos.google.cloud.servicedirectory.v1beta1.ICreateNamespaceRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createNamespace(request, options, callback);
  }
  getNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.IGetNamespaceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IGetNamespaceRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.IGetNamespaceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      | protos.google.cloud.servicedirectory.v1beta1.IGetNamespaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.IGetNamespaceRequest,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      | protos.google.cloud.servicedirectory.v1beta1.IGetNamespaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets a namespace.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the namespace to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Namespace]{@link google.cloud.servicedirectory.v1beta1.Namespace}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.IGetNamespaceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.servicedirectory.v1beta1.INamespace,
          | protos.google.cloud.servicedirectory.v1beta1.IGetNamespaceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      | protos.google.cloud.servicedirectory.v1beta1.IGetNamespaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IGetNamespaceRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getNamespace(request, options, callback);
  }
  updateNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.IUpdateNamespaceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IUpdateNamespaceRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.IUpdateNamespaceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      | protos.google.cloud.servicedirectory.v1beta1.IUpdateNamespaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.IUpdateNamespaceRequest,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      | protos.google.cloud.servicedirectory.v1beta1.IUpdateNamespaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Updates a namespace.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.servicedirectory.v1beta1.Namespace} request.namespace
   *   Required. The updated namespace.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. List of fields to be updated in this request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Namespace]{@link google.cloud.servicedirectory.v1beta1.Namespace}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.IUpdateNamespaceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.servicedirectory.v1beta1.INamespace,
          | protos.google.cloud.servicedirectory.v1beta1.IUpdateNamespaceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      | protos.google.cloud.servicedirectory.v1beta1.IUpdateNamespaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.INamespace,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IUpdateNamespaceRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'namespace.name': request.namespace!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateNamespace(request, options, callback);
  }
  deleteNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.IDeleteNamespaceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IDeleteNamespaceRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.IDeleteNamespaceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.servicedirectory.v1beta1.IDeleteNamespaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.IDeleteNamespaceRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.servicedirectory.v1beta1.IDeleteNamespaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Deletes a namespace. This also deletes all services and endpoints in
   * the namespace.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the namespace to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteNamespace(
    request: protos.google.cloud.servicedirectory.v1beta1.IDeleteNamespaceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.servicedirectory.v1beta1.IDeleteNamespaceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.servicedirectory.v1beta1.IDeleteNamespaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IDeleteNamespaceRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteNamespace(request, options, callback);
  }
  createService(
    request: protos.google.cloud.servicedirectory.v1beta1.ICreateServiceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IService,
      (
        | protos.google.cloud.servicedirectory.v1beta1.ICreateServiceRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createService(
    request: protos.google.cloud.servicedirectory.v1beta1.ICreateServiceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IService,
      | protos.google.cloud.servicedirectory.v1beta1.ICreateServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createService(
    request: protos.google.cloud.servicedirectory.v1beta1.ICreateServiceRequest,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IService,
      | protos.google.cloud.servicedirectory.v1beta1.ICreateServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates a service, and returns the new Service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the namespace this service will belong to.
   * @param {string} request.serviceId
   *   Required. The Resource ID must be 1-63 characters long, and comply with
   *   <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
   *   Specifically, the name must be 1-63 characters long and match the regular
   *   expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
   *   character must be a lowercase letter, and all following characters must
   *   be a dash, lowercase letter, or digit, except the last character, which
   *   cannot be a dash.
   * @param {google.cloud.servicedirectory.v1beta1.Service} request.service
   *   Required. A service  with initial fields set.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Service]{@link google.cloud.servicedirectory.v1beta1.Service}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createService(
    request: protos.google.cloud.servicedirectory.v1beta1.ICreateServiceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.servicedirectory.v1beta1.IService,
          | protos.google.cloud.servicedirectory.v1beta1.ICreateServiceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IService,
      | protos.google.cloud.servicedirectory.v1beta1.ICreateServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IService,
      (
        | protos.google.cloud.servicedirectory.v1beta1.ICreateServiceRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createService(request, options, callback);
  }
  getService(
    request: protos.google.cloud.servicedirectory.v1beta1.IGetServiceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IService,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IGetServiceRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getService(
    request: protos.google.cloud.servicedirectory.v1beta1.IGetServiceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IService,
      | protos.google.cloud.servicedirectory.v1beta1.IGetServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getService(
    request: protos.google.cloud.servicedirectory.v1beta1.IGetServiceRequest,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IService,
      | protos.google.cloud.servicedirectory.v1beta1.IGetServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets a service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the service to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Service]{@link google.cloud.servicedirectory.v1beta1.Service}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getService(
    request: protos.google.cloud.servicedirectory.v1beta1.IGetServiceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.servicedirectory.v1beta1.IService,
          | protos.google.cloud.servicedirectory.v1beta1.IGetServiceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IService,
      | protos.google.cloud.servicedirectory.v1beta1.IGetServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IService,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IGetServiceRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getService(request, options, callback);
  }
  updateService(
    request: protos.google.cloud.servicedirectory.v1beta1.IUpdateServiceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IService,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IUpdateServiceRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateService(
    request: protos.google.cloud.servicedirectory.v1beta1.IUpdateServiceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IService,
      | protos.google.cloud.servicedirectory.v1beta1.IUpdateServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateService(
    request: protos.google.cloud.servicedirectory.v1beta1.IUpdateServiceRequest,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IService,
      | protos.google.cloud.servicedirectory.v1beta1.IUpdateServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Updates a service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.servicedirectory.v1beta1.Service} request.service
   *   Required. The updated service.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. List of fields to be updated in this request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Service]{@link google.cloud.servicedirectory.v1beta1.Service}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateService(
    request: protos.google.cloud.servicedirectory.v1beta1.IUpdateServiceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.servicedirectory.v1beta1.IService,
          | protos.google.cloud.servicedirectory.v1beta1.IUpdateServiceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IService,
      | protos.google.cloud.servicedirectory.v1beta1.IUpdateServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IService,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IUpdateServiceRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'service.name': request.service!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateService(request, options, callback);
  }
  deleteService(
    request: protos.google.cloud.servicedirectory.v1beta1.IDeleteServiceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IDeleteServiceRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteService(
    request: protos.google.cloud.servicedirectory.v1beta1.IDeleteServiceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.servicedirectory.v1beta1.IDeleteServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteService(
    request: protos.google.cloud.servicedirectory.v1beta1.IDeleteServiceRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.servicedirectory.v1beta1.IDeleteServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Deletes a service. This also deletes all endpoints associated with
   * the service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the service to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteService(
    request: protos.google.cloud.servicedirectory.v1beta1.IDeleteServiceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.servicedirectory.v1beta1.IDeleteServiceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.servicedirectory.v1beta1.IDeleteServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IDeleteServiceRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteService(request, options, callback);
  }
  createEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.ICreateEndpointRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      (
        | protos.google.cloud.servicedirectory.v1beta1.ICreateEndpointRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.ICreateEndpointRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      | protos.google.cloud.servicedirectory.v1beta1.ICreateEndpointRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.ICreateEndpointRequest,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      | protos.google.cloud.servicedirectory.v1beta1.ICreateEndpointRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates a endpoint, and returns the new Endpoint.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the service that this endpoint provides.
   * @param {string} request.endpointId
   *   Required. The Resource ID must be 1-63 characters long, and comply with
   *   <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
   *   Specifically, the name must be 1-63 characters long and match the regular
   *   expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
   *   character must be a lowercase letter, and all following characters must
   *   be a dash, lowercase letter, or digit, except the last character, which
   *   cannot be a dash.
   * @param {google.cloud.servicedirectory.v1beta1.Endpoint} request.endpoint
   *   Required. A endpoint with initial fields set.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Endpoint]{@link google.cloud.servicedirectory.v1beta1.Endpoint}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.ICreateEndpointRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
          | protos.google.cloud.servicedirectory.v1beta1.ICreateEndpointRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      | protos.google.cloud.servicedirectory.v1beta1.ICreateEndpointRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      (
        | protos.google.cloud.servicedirectory.v1beta1.ICreateEndpointRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createEndpoint(request, options, callback);
  }
  getEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.IGetEndpointRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IGetEndpointRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.IGetEndpointRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      | protos.google.cloud.servicedirectory.v1beta1.IGetEndpointRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.IGetEndpointRequest,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      | protos.google.cloud.servicedirectory.v1beta1.IGetEndpointRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets a endpoint.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the endpoint to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Endpoint]{@link google.cloud.servicedirectory.v1beta1.Endpoint}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.IGetEndpointRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
          | protos.google.cloud.servicedirectory.v1beta1.IGetEndpointRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      | protos.google.cloud.servicedirectory.v1beta1.IGetEndpointRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IGetEndpointRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getEndpoint(request, options, callback);
  }
  updateEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.IUpdateEndpointRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IUpdateEndpointRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.IUpdateEndpointRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      | protos.google.cloud.servicedirectory.v1beta1.IUpdateEndpointRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.IUpdateEndpointRequest,
    callback: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      | protos.google.cloud.servicedirectory.v1beta1.IUpdateEndpointRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Updates a endpoint.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.servicedirectory.v1beta1.Endpoint} request.endpoint
   *   Required. The updated endpoint.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. List of fields to be updated in this request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Endpoint]{@link google.cloud.servicedirectory.v1beta1.Endpoint}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.IUpdateEndpointRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
          | protos.google.cloud.servicedirectory.v1beta1.IUpdateEndpointRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      | protos.google.cloud.servicedirectory.v1beta1.IUpdateEndpointRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IUpdateEndpointRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'endpoint.name': request.endpoint!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateEndpoint(request, options, callback);
  }
  deleteEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.IDeleteEndpointRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IDeleteEndpointRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.IDeleteEndpointRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.servicedirectory.v1beta1.IDeleteEndpointRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.IDeleteEndpointRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.servicedirectory.v1beta1.IDeleteEndpointRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Deletes a endpoint.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the endpoint to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteEndpoint(
    request: protos.google.cloud.servicedirectory.v1beta1.IDeleteEndpointRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.servicedirectory.v1beta1.IDeleteEndpointRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.servicedirectory.v1beta1.IDeleteEndpointRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.servicedirectory.v1beta1.IDeleteEndpointRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteEndpoint(request, options, callback);
  }
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets the IAM Policy for a resource (namespace or service only).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.GetPolicyOptions} request.options
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Sets the IAM Policy for a resource (namespace or service only).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being specified.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.Policy} request.policy
   *   REQUIRED: The complete policy to be applied to the `resource`. The size of
   *   the policy is limited to a few 10s of KB. An empty policy is a
   *   valid policy but certain Cloud Platform services (such as Projects)
   *   might reject them.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  >;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Tests IAM permissions for a resource (namespace or service only).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }

  listNamespaces(
    request: protos.google.cloud.servicedirectory.v1beta1.IListNamespacesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.INamespace[],
      protos.google.cloud.servicedirectory.v1beta1.IListNamespacesRequest | null,
      protos.google.cloud.servicedirectory.v1beta1.IListNamespacesResponse
    ]
  >;
  listNamespaces(
    request: protos.google.cloud.servicedirectory.v1beta1.IListNamespacesRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.servicedirectory.v1beta1.IListNamespacesRequest,
      | protos.google.cloud.servicedirectory.v1beta1.IListNamespacesResponse
      | null
      | undefined,
      protos.google.cloud.servicedirectory.v1beta1.INamespace
    >
  ): void;
  listNamespaces(
    request: protos.google.cloud.servicedirectory.v1beta1.IListNamespacesRequest,
    callback: PaginationCallback<
      protos.google.cloud.servicedirectory.v1beta1.IListNamespacesRequest,
      | protos.google.cloud.servicedirectory.v1beta1.IListNamespacesResponse
      | null
      | undefined,
      protos.google.cloud.servicedirectory.v1beta1.INamespace
    >
  ): void;
  /**
   * Lists all namespaces.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the project and location whose namespaces we'd like to
   *   list.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous List request, if any.
   * @param {string} [request.filter]
   *   Optional. The filter to list result by.
   *
   *   General filter string syntax:
   *   <field> <operator> <value> (<logical connector>)
   *   <field> can be "name", or "labels.<key>" for map field.
   *   <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
   *   is roughly the same as "=".
   *   <value> must be the same data type as field.
   *   <logical connector> can be "AND, OR, NOT".
   *
   *   Examples of valid filters:
   *   * "labels.owner" returns Namespaces that have a label with the key "owner"
   *     this is the same as "labels:owner".
   *   * "labels.protocol=gRPC" returns Namespaces that have key/value
   *     "protocol=gRPC".
   *   * "name>projects/my-project/locations/us-east/namespaces/namespace-c"
   *     returns Namespaces that have name that is alphabetically later than the
   *     string, so "namespace-e" will be returned but "namespace-a" will not be.
   *   * "labels.owner!=sd AND labels.foo=bar" returns Namespaces that have
   *     "owner" in label key but value is not "sd" AND have key/value foo=bar.
   *   * "doesnotexist.foo=bar" returns an empty list. Note that Namespace doesn't
   *     have a field called "doesnotexist". Since the filter does not match any
   *     Namespaces, it returns no results.
   * @param {string} [request.orderBy]
   *   Optional. The order to list result by.
   *
   *   General order by string syntax:
   *   <field> (<asc|desc>) (,)
   *   <field> allows values {"name"}
   *   <asc/desc> ascending or descending order by <field>. If this is left
   *   blank, "asc" is used.
   *   Note that an empty order_by string result in default order, which is order
   *   by name in ascending order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Namespace]{@link google.cloud.servicedirectory.v1beta1.Namespace}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Namespace]{@link google.cloud.servicedirectory.v1beta1.Namespace} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListNamespacesRequest]{@link google.cloud.servicedirectory.v1beta1.ListNamespacesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListNamespacesResponse]{@link google.cloud.servicedirectory.v1beta1.ListNamespacesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listNamespaces(
    request: protos.google.cloud.servicedirectory.v1beta1.IListNamespacesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.servicedirectory.v1beta1.IListNamespacesRequest,
          | protos.google.cloud.servicedirectory.v1beta1.IListNamespacesResponse
          | null
          | undefined,
          protos.google.cloud.servicedirectory.v1beta1.INamespace
        >,
    callback?: PaginationCallback<
      protos.google.cloud.servicedirectory.v1beta1.IListNamespacesRequest,
      | protos.google.cloud.servicedirectory.v1beta1.IListNamespacesResponse
      | null
      | undefined,
      protos.google.cloud.servicedirectory.v1beta1.INamespace
    >
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.INamespace[],
      protos.google.cloud.servicedirectory.v1beta1.IListNamespacesRequest | null,
      protos.google.cloud.servicedirectory.v1beta1.IListNamespacesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listNamespaces(request, options, callback);
  }

  /**
   * Equivalent to {@link listNamespaces}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listNamespaces} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the project and location whose namespaces we'd like to
   *   list.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous List request, if any.
   * @param {string} [request.filter]
   *   Optional. The filter to list result by.
   *
   *   General filter string syntax:
   *   <field> <operator> <value> (<logical connector>)
   *   <field> can be "name", or "labels.<key>" for map field.
   *   <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
   *   is roughly the same as "=".
   *   <value> must be the same data type as field.
   *   <logical connector> can be "AND, OR, NOT".
   *
   *   Examples of valid filters:
   *   * "labels.owner" returns Namespaces that have a label with the key "owner"
   *     this is the same as "labels:owner".
   *   * "labels.protocol=gRPC" returns Namespaces that have key/value
   *     "protocol=gRPC".
   *   * "name>projects/my-project/locations/us-east/namespaces/namespace-c"
   *     returns Namespaces that have name that is alphabetically later than the
   *     string, so "namespace-e" will be returned but "namespace-a" will not be.
   *   * "labels.owner!=sd AND labels.foo=bar" returns Namespaces that have
   *     "owner" in label key but value is not "sd" AND have key/value foo=bar.
   *   * "doesnotexist.foo=bar" returns an empty list. Note that Namespace doesn't
   *     have a field called "doesnotexist". Since the filter does not match any
   *     Namespaces, it returns no results.
   * @param {string} [request.orderBy]
   *   Optional. The order to list result by.
   *
   *   General order by string syntax:
   *   <field> (<asc|desc>) (,)
   *   <field> allows values {"name"}
   *   <asc/desc> ascending or descending order by <field>. If this is left
   *   blank, "asc" is used.
   *   Note that an empty order_by string result in default order, which is order
   *   by name in ascending order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Namespace]{@link google.cloud.servicedirectory.v1beta1.Namespace} on 'data' event.
   */
  listNamespacesStream(
    request?: protos.google.cloud.servicedirectory.v1beta1.IListNamespacesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listNamespaces.createStream(
      this.innerApiCalls.listNamespaces as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listNamespaces}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the project and location whose namespaces we'd like to
   *   list.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous List request, if any.
   * @param {string} [request.filter]
   *   Optional. The filter to list result by.
   *
   *   General filter string syntax:
   *   <field> <operator> <value> (<logical connector>)
   *   <field> can be "name", or "labels.<key>" for map field.
   *   <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
   *   is roughly the same as "=".
   *   <value> must be the same data type as field.
   *   <logical connector> can be "AND, OR, NOT".
   *
   *   Examples of valid filters:
   *   * "labels.owner" returns Namespaces that have a label with the key "owner"
   *     this is the same as "labels:owner".
   *   * "labels.protocol=gRPC" returns Namespaces that have key/value
   *     "protocol=gRPC".
   *   * "name>projects/my-project/locations/us-east/namespaces/namespace-c"
   *     returns Namespaces that have name that is alphabetically later than the
   *     string, so "namespace-e" will be returned but "namespace-a" will not be.
   *   * "labels.owner!=sd AND labels.foo=bar" returns Namespaces that have
   *     "owner" in label key but value is not "sd" AND have key/value foo=bar.
   *   * "doesnotexist.foo=bar" returns an empty list. Note that Namespace doesn't
   *     have a field called "doesnotexist". Since the filter does not match any
   *     Namespaces, it returns no results.
   * @param {string} [request.orderBy]
   *   Optional. The order to list result by.
   *
   *   General order by string syntax:
   *   <field> (<asc|desc>) (,)
   *   <field> allows values {"name"}
   *   <asc/desc> ascending or descending order by <field>. If this is left
   *   blank, "asc" is used.
   *   Note that an empty order_by string result in default order, which is order
   *   by name in ascending order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listNamespacesAsync(
    request?: protos.google.cloud.servicedirectory.v1beta1.IListNamespacesRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.cloud.servicedirectory.v1beta1.INamespace> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listNamespaces.asyncIterate(
      this.innerApiCalls['listNamespaces'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.servicedirectory.v1beta1.INamespace>;
  }
  listServices(
    request: protos.google.cloud.servicedirectory.v1beta1.IListServicesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IService[],
      protos.google.cloud.servicedirectory.v1beta1.IListServicesRequest | null,
      protos.google.cloud.servicedirectory.v1beta1.IListServicesResponse
    ]
  >;
  listServices(
    request: protos.google.cloud.servicedirectory.v1beta1.IListServicesRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.servicedirectory.v1beta1.IListServicesRequest,
      | protos.google.cloud.servicedirectory.v1beta1.IListServicesResponse
      | null
      | undefined,
      protos.google.cloud.servicedirectory.v1beta1.IService
    >
  ): void;
  listServices(
    request: protos.google.cloud.servicedirectory.v1beta1.IListServicesRequest,
    callback: PaginationCallback<
      protos.google.cloud.servicedirectory.v1beta1.IListServicesRequest,
      | protos.google.cloud.servicedirectory.v1beta1.IListServicesResponse
      | null
      | undefined,
      protos.google.cloud.servicedirectory.v1beta1.IService
    >
  ): void;
  /**
   * Lists all services belonging to a namespace.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the namespace whose services we'd
   *   like to list.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous List request,
   *   if any.
   * @param {string} [request.filter]
   *   Optional. The filter to list result by.
   *
   *   General filter string syntax:
   *   <field> <operator> <value> (<logical connector>)
   *   <field> can be "name", or "metadata.<key>" for map field.
   *   <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
   *   is roughly the same as "=".
   *   <value> must be the same data type as field.
   *   <logical connector> can be "AND, OR, NOT".
   *
   *   Examples of valid filters:
   *   * "metadata.owner" returns Services that have a label with the key "owner"
   *     this is the same as "metadata:owner".
   *   * "metadata.protocol=gRPC" returns Services that have key/value
   *     "protocol=gRPC".
   *   * "name>projects/my-project/locations/us-east/namespaces/my-namespace/services/service-c"
   *     returns Services that have name that is alphabetically later than the
   *     string, so "service-e" will be returned but "service-a" will not be.
   *   * "metadata.owner!=sd AND metadata.foo=bar" returns Services that have
   *     "owner" in label key but value is not "sd" AND have key/value foo=bar.
   *   * "doesnotexist.foo=bar" returns an empty list. Note that Service doesn't
   *     have a field called "doesnotexist". Since the filter does not match any
   *     Services, it returns no results.
   * @param {string} [request.orderBy]
   *   Optional. The order to list result by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Service]{@link google.cloud.servicedirectory.v1beta1.Service}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Service]{@link google.cloud.servicedirectory.v1beta1.Service} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListServicesRequest]{@link google.cloud.servicedirectory.v1beta1.ListServicesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListServicesResponse]{@link google.cloud.servicedirectory.v1beta1.ListServicesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listServices(
    request: protos.google.cloud.servicedirectory.v1beta1.IListServicesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.servicedirectory.v1beta1.IListServicesRequest,
          | protos.google.cloud.servicedirectory.v1beta1.IListServicesResponse
          | null
          | undefined,
          protos.google.cloud.servicedirectory.v1beta1.IService
        >,
    callback?: PaginationCallback<
      protos.google.cloud.servicedirectory.v1beta1.IListServicesRequest,
      | protos.google.cloud.servicedirectory.v1beta1.IListServicesResponse
      | null
      | undefined,
      protos.google.cloud.servicedirectory.v1beta1.IService
    >
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IService[],
      protos.google.cloud.servicedirectory.v1beta1.IListServicesRequest | null,
      protos.google.cloud.servicedirectory.v1beta1.IListServicesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listServices(request, options, callback);
  }

  /**
   * Equivalent to {@link listServices}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listServices} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the namespace whose services we'd
   *   like to list.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous List request,
   *   if any.
   * @param {string} [request.filter]
   *   Optional. The filter to list result by.
   *
   *   General filter string syntax:
   *   <field> <operator> <value> (<logical connector>)
   *   <field> can be "name", or "metadata.<key>" for map field.
   *   <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
   *   is roughly the same as "=".
   *   <value> must be the same data type as field.
   *   <logical connector> can be "AND, OR, NOT".
   *
   *   Examples of valid filters:
   *   * "metadata.owner" returns Services that have a label with the key "owner"
   *     this is the same as "metadata:owner".
   *   * "metadata.protocol=gRPC" returns Services that have key/value
   *     "protocol=gRPC".
   *   * "name>projects/my-project/locations/us-east/namespaces/my-namespace/services/service-c"
   *     returns Services that have name that is alphabetically later than the
   *     string, so "service-e" will be returned but "service-a" will not be.
   *   * "metadata.owner!=sd AND metadata.foo=bar" returns Services that have
   *     "owner" in label key but value is not "sd" AND have key/value foo=bar.
   *   * "doesnotexist.foo=bar" returns an empty list. Note that Service doesn't
   *     have a field called "doesnotexist". Since the filter does not match any
   *     Services, it returns no results.
   * @param {string} [request.orderBy]
   *   Optional. The order to list result by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Service]{@link google.cloud.servicedirectory.v1beta1.Service} on 'data' event.
   */
  listServicesStream(
    request?: protos.google.cloud.servicedirectory.v1beta1.IListServicesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listServices.createStream(
      this.innerApiCalls.listServices as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listServices}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the namespace whose services we'd
   *   like to list.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous List request,
   *   if any.
   * @param {string} [request.filter]
   *   Optional. The filter to list result by.
   *
   *   General filter string syntax:
   *   <field> <operator> <value> (<logical connector>)
   *   <field> can be "name", or "metadata.<key>" for map field.
   *   <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
   *   is roughly the same as "=".
   *   <value> must be the same data type as field.
   *   <logical connector> can be "AND, OR, NOT".
   *
   *   Examples of valid filters:
   *   * "metadata.owner" returns Services that have a label with the key "owner"
   *     this is the same as "metadata:owner".
   *   * "metadata.protocol=gRPC" returns Services that have key/value
   *     "protocol=gRPC".
   *   * "name>projects/my-project/locations/us-east/namespaces/my-namespace/services/service-c"
   *     returns Services that have name that is alphabetically later than the
   *     string, so "service-e" will be returned but "service-a" will not be.
   *   * "metadata.owner!=sd AND metadata.foo=bar" returns Services that have
   *     "owner" in label key but value is not "sd" AND have key/value foo=bar.
   *   * "doesnotexist.foo=bar" returns an empty list. Note that Service doesn't
   *     have a field called "doesnotexist". Since the filter does not match any
   *     Services, it returns no results.
   * @param {string} [request.orderBy]
   *   Optional. The order to list result by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listServicesAsync(
    request?: protos.google.cloud.servicedirectory.v1beta1.IListServicesRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.cloud.servicedirectory.v1beta1.IService> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listServices.asyncIterate(
      this.innerApiCalls['listServices'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.servicedirectory.v1beta1.IService>;
  }
  listEndpoints(
    request: protos.google.cloud.servicedirectory.v1beta1.IListEndpointsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint[],
      protos.google.cloud.servicedirectory.v1beta1.IListEndpointsRequest | null,
      protos.google.cloud.servicedirectory.v1beta1.IListEndpointsResponse
    ]
  >;
  listEndpoints(
    request: protos.google.cloud.servicedirectory.v1beta1.IListEndpointsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.servicedirectory.v1beta1.IListEndpointsRequest,
      | protos.google.cloud.servicedirectory.v1beta1.IListEndpointsResponse
      | null
      | undefined,
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint
    >
  ): void;
  listEndpoints(
    request: protos.google.cloud.servicedirectory.v1beta1.IListEndpointsRequest,
    callback: PaginationCallback<
      protos.google.cloud.servicedirectory.v1beta1.IListEndpointsRequest,
      | protos.google.cloud.servicedirectory.v1beta1.IListEndpointsResponse
      | null
      | undefined,
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint
    >
  ): void;
  /**
   * Lists all endpoints.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the service whose endpoints we'd like to
   *   list.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous List request,
   *   if any.
   * @param {string} [request.filter]
   *   Optional. The filter to list result by.
   *
   *   General filter string syntax:
   *   <field> <operator> <value> (<logical connector>)
   *   <field> can be "name", "address", "port" or "metadata.<key>" for map field.
   *   <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
   *   is roughly the same as "=".
   *   <value> must be the same data type as field.
   *   <logical connector> can be "AND, OR, NOT".
   *
   *   Examples of valid filters:
   *   * "metadata.owner" returns Endpoints that have a label with the key "owner"
   *     this is the same as "metadata:owner".
   *   * "metadata.protocol=gRPC" returns Endpoints that have key/value
   *     "protocol=gRPC".
   *   * "address=192.108.1.105" returns Endpoints that have this address.
   *   * "port>8080" returns Endpoints that have port number larger than 8080.
   *   * "name>projects/my-project/locations/us-east/namespaces/my-namespace/services/my-service/endpoints/endpoint-c"
   *     returns Endpoints that have name that is alphabetically later than the
   *     string, so "endpoint-e" will be returned but "endpoint-a" will not be.
   *   * "metadata.owner!=sd AND metadata.foo=bar" returns Endpoints that have
   *     "owner" in label key but value is not "sd" AND have key/value foo=bar.
   *   * "doesnotexist.foo=bar" returns an empty list. Note that Endpoint doesn't
   *     have a field called "doesnotexist". Since the filter does not match any
   *     Endpoints, it returns no results.
   * @param {string} [request.orderBy]
   *   Optional. The order to list result by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Endpoint]{@link google.cloud.servicedirectory.v1beta1.Endpoint}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Endpoint]{@link google.cloud.servicedirectory.v1beta1.Endpoint} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListEndpointsRequest]{@link google.cloud.servicedirectory.v1beta1.ListEndpointsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListEndpointsResponse]{@link google.cloud.servicedirectory.v1beta1.ListEndpointsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listEndpoints(
    request: protos.google.cloud.servicedirectory.v1beta1.IListEndpointsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.servicedirectory.v1beta1.IListEndpointsRequest,
          | protos.google.cloud.servicedirectory.v1beta1.IListEndpointsResponse
          | null
          | undefined,
          protos.google.cloud.servicedirectory.v1beta1.IEndpoint
        >,
    callback?: PaginationCallback<
      protos.google.cloud.servicedirectory.v1beta1.IListEndpointsRequest,
      | protos.google.cloud.servicedirectory.v1beta1.IListEndpointsResponse
      | null
      | undefined,
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint
    >
  ): Promise<
    [
      protos.google.cloud.servicedirectory.v1beta1.IEndpoint[],
      protos.google.cloud.servicedirectory.v1beta1.IListEndpointsRequest | null,
      protos.google.cloud.servicedirectory.v1beta1.IListEndpointsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listEndpoints(request, options, callback);
  }

  /**
   * Equivalent to {@link listEndpoints}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listEndpoints} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the service whose endpoints we'd like to
   *   list.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous List request,
   *   if any.
   * @param {string} [request.filter]
   *   Optional. The filter to list result by.
   *
   *   General filter string syntax:
   *   <field> <operator> <value> (<logical connector>)
   *   <field> can be "name", "address", "port" or "metadata.<key>" for map field.
   *   <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
   *   is roughly the same as "=".
   *   <value> must be the same data type as field.
   *   <logical connector> can be "AND, OR, NOT".
   *
   *   Examples of valid filters:
   *   * "metadata.owner" returns Endpoints that have a label with the key "owner"
   *     this is the same as "metadata:owner".
   *   * "metadata.protocol=gRPC" returns Endpoints that have key/value
   *     "protocol=gRPC".
   *   * "address=192.108.1.105" returns Endpoints that have this address.
   *   * "port>8080" returns Endpoints that have port number larger than 8080.
   *   * "name>projects/my-project/locations/us-east/namespaces/my-namespace/services/my-service/endpoints/endpoint-c"
   *     returns Endpoints that have name that is alphabetically later than the
   *     string, so "endpoint-e" will be returned but "endpoint-a" will not be.
   *   * "metadata.owner!=sd AND metadata.foo=bar" returns Endpoints that have
   *     "owner" in label key but value is not "sd" AND have key/value foo=bar.
   *   * "doesnotexist.foo=bar" returns an empty list. Note that Endpoint doesn't
   *     have a field called "doesnotexist". Since the filter does not match any
   *     Endpoints, it returns no results.
   * @param {string} [request.orderBy]
   *   Optional. The order to list result by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Endpoint]{@link google.cloud.servicedirectory.v1beta1.Endpoint} on 'data' event.
   */
  listEndpointsStream(
    request?: protos.google.cloud.servicedirectory.v1beta1.IListEndpointsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listEndpoints.createStream(
      this.innerApiCalls.listEndpoints as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listEndpoints}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the service whose endpoints we'd like to
   *   list.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous List request,
   *   if any.
   * @param {string} [request.filter]
   *   Optional. The filter to list result by.
   *
   *   General filter string syntax:
   *   <field> <operator> <value> (<logical connector>)
   *   <field> can be "name", "address", "port" or "metadata.<key>" for map field.
   *   <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
   *   is roughly the same as "=".
   *   <value> must be the same data type as field.
   *   <logical connector> can be "AND, OR, NOT".
   *
   *   Examples of valid filters:
   *   * "metadata.owner" returns Endpoints that have a label with the key "owner"
   *     this is the same as "metadata:owner".
   *   * "metadata.protocol=gRPC" returns Endpoints that have key/value
   *     "protocol=gRPC".
   *   * "address=192.108.1.105" returns Endpoints that have this address.
   *   * "port>8080" returns Endpoints that have port number larger than 8080.
   *   * "name>projects/my-project/locations/us-east/namespaces/my-namespace/services/my-service/endpoints/endpoint-c"
   *     returns Endpoints that have name that is alphabetically later than the
   *     string, so "endpoint-e" will be returned but "endpoint-a" will not be.
   *   * "metadata.owner!=sd AND metadata.foo=bar" returns Endpoints that have
   *     "owner" in label key but value is not "sd" AND have key/value foo=bar.
   *   * "doesnotexist.foo=bar" returns an empty list. Note that Endpoint doesn't
   *     have a field called "doesnotexist". Since the filter does not match any
   *     Endpoints, it returns no results.
   * @param {string} [request.orderBy]
   *   Optional. The order to list result by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listEndpointsAsync(
    request?: protos.google.cloud.servicedirectory.v1beta1.IListEndpointsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.cloud.servicedirectory.v1beta1.IEndpoint> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listEndpoints.asyncIterate(
      this.innerApiCalls['listEndpoints'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.servicedirectory.v1beta1.IEndpoint>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified endpoint resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} namespace
   * @param {string} service
   * @param {string} endpoint
   * @returns {string} Resource name string.
   */
  endpointPath(
    project: string,
    location: string,
    namespace: string,
    service: string,
    endpoint: string
  ) {
    return this.pathTemplates.endpointPathTemplate.render({
      project: project,
      location: location,
      namespace: namespace,
      service: service,
      endpoint: endpoint,
    });
  }

  /**
   * Parse the project from Endpoint resource.
   *
   * @param {string} endpointName
   *   A fully-qualified path representing Endpoint resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEndpointName(endpointName: string) {
    return this.pathTemplates.endpointPathTemplate.match(endpointName).project;
  }

  /**
   * Parse the location from Endpoint resource.
   *
   * @param {string} endpointName
   *   A fully-qualified path representing Endpoint resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEndpointName(endpointName: string) {
    return this.pathTemplates.endpointPathTemplate.match(endpointName).location;
  }

  /**
   * Parse the namespace from Endpoint resource.
   *
   * @param {string} endpointName
   *   A fully-qualified path representing Endpoint resource.
   * @returns {string} A string representing the namespace.
   */
  matchNamespaceFromEndpointName(endpointName: string) {
    return this.pathTemplates.endpointPathTemplate.match(endpointName)
      .namespace;
  }

  /**
   * Parse the service from Endpoint resource.
   *
   * @param {string} endpointName
   *   A fully-qualified path representing Endpoint resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromEndpointName(endpointName: string) {
    return this.pathTemplates.endpointPathTemplate.match(endpointName).service;
  }

  /**
   * Parse the endpoint from Endpoint resource.
   *
   * @param {string} endpointName
   *   A fully-qualified path representing Endpoint resource.
   * @returns {string} A string representing the endpoint.
   */
  matchEndpointFromEndpointName(endpointName: string) {
    return this.pathTemplates.endpointPathTemplate.match(endpointName).endpoint;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified namespace resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} namespace
   * @returns {string} Resource name string.
   */
  namespacePath(project: string, location: string, namespace: string) {
    return this.pathTemplates.namespacePathTemplate.render({
      project: project,
      location: location,
      namespace: namespace,
    });
  }

  /**
   * Parse the project from Namespace resource.
   *
   * @param {string} namespaceName
   *   A fully-qualified path representing Namespace resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNamespaceName(namespaceName: string) {
    return this.pathTemplates.namespacePathTemplate.match(namespaceName)
      .project;
  }

  /**
   * Parse the location from Namespace resource.
   *
   * @param {string} namespaceName
   *   A fully-qualified path representing Namespace resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNamespaceName(namespaceName: string) {
    return this.pathTemplates.namespacePathTemplate.match(namespaceName)
      .location;
  }

  /**
   * Parse the namespace from Namespace resource.
   *
   * @param {string} namespaceName
   *   A fully-qualified path representing Namespace resource.
   * @returns {string} A string representing the namespace.
   */
  matchNamespaceFromNamespaceName(namespaceName: string) {
    return this.pathTemplates.namespacePathTemplate.match(namespaceName)
      .namespace;
  }

  /**
   * Return a fully-qualified service resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} namespace
   * @param {string} service
   * @returns {string} Resource name string.
   */
  servicePath(
    project: string,
    location: string,
    namespace: string,
    service: string
  ) {
    return this.pathTemplates.servicePathTemplate.render({
      project: project,
      location: location,
      namespace: namespace,
      service: service,
    });
  }

  /**
   * Parse the project from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).project;
  }

  /**
   * Parse the location from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).location;
  }

  /**
   * Parse the namespace from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the namespace.
   */
  matchNamespaceFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).namespace;
  }

  /**
   * Parse the service from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).service;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.registrationServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
