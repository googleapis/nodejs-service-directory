// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as registrationserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.RegistrationServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = registrationserviceModule.v1beta1.RegistrationServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = registrationserviceModule.v1beta1.RegistrationServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = registrationserviceModule.v1beta1.RegistrationServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new registrationserviceModule.v1beta1.RegistrationServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.registrationServiceStub, undefined);
        await client.initialize();
        assert(client.registrationServiceStub);
    });

    it('has close method', () => {
        const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('createNamespace', () => {
        it('invokes createNamespace without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.CreateNamespaceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace());
            client.innerApiCalls.createNamespace = stubSimpleCall(expectedResponse);
            const [response] = await client.createNamespace(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createNamespace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createNamespace without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.CreateNamespaceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace());
            client.innerApiCalls.createNamespace = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createNamespace(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.servicedirectory.v1beta1.INamespace|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createNamespace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createNamespace with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.CreateNamespaceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createNamespace = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createNamespace(request), expectedError);
            assert((client.innerApiCalls.createNamespace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getNamespace', () => {
        it('invokes getNamespace without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.GetNamespaceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace());
            client.innerApiCalls.getNamespace = stubSimpleCall(expectedResponse);
            const [response] = await client.getNamespace(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getNamespace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getNamespace without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.GetNamespaceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace());
            client.innerApiCalls.getNamespace = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getNamespace(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.servicedirectory.v1beta1.INamespace|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getNamespace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getNamespace with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.GetNamespaceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getNamespace = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getNamespace(request), expectedError);
            assert((client.innerApiCalls.getNamespace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateNamespace', () => {
        it('invokes updateNamespace without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.UpdateNamespaceRequest());
            request.namespace = {};
            request.namespace.name = '';
            const expectedHeaderRequestParams = "namespace.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace());
            client.innerApiCalls.updateNamespace = stubSimpleCall(expectedResponse);
            const [response] = await client.updateNamespace(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateNamespace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateNamespace without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.UpdateNamespaceRequest());
            request.namespace = {};
            request.namespace.name = '';
            const expectedHeaderRequestParams = "namespace.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace());
            client.innerApiCalls.updateNamespace = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateNamespace(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.servicedirectory.v1beta1.INamespace|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateNamespace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateNamespace with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.UpdateNamespaceRequest());
            request.namespace = {};
            request.namespace.name = '';
            const expectedHeaderRequestParams = "namespace.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateNamespace = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateNamespace(request), expectedError);
            assert((client.innerApiCalls.updateNamespace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteNamespace', () => {
        it('invokes deleteNamespace without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.DeleteNamespaceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteNamespace = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteNamespace(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteNamespace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteNamespace without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.DeleteNamespaceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteNamespace = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteNamespace(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteNamespace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteNamespace with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.DeleteNamespaceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteNamespace = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteNamespace(request), expectedError);
            assert((client.innerApiCalls.deleteNamespace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createService', () => {
        it('invokes createService without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.CreateServiceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service());
            client.innerApiCalls.createService = stubSimpleCall(expectedResponse);
            const [response] = await client.createService(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createService without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.CreateServiceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service());
            client.innerApiCalls.createService = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createService(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.servicedirectory.v1beta1.IService|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createService with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.CreateServiceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createService = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createService(request), expectedError);
            assert((client.innerApiCalls.createService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getService', () => {
        it('invokes getService without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.GetServiceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service());
            client.innerApiCalls.getService = stubSimpleCall(expectedResponse);
            const [response] = await client.getService(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getService without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.GetServiceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service());
            client.innerApiCalls.getService = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getService(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.servicedirectory.v1beta1.IService|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getService with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.GetServiceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getService = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getService(request), expectedError);
            assert((client.innerApiCalls.getService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateService', () => {
        it('invokes updateService without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.UpdateServiceRequest());
            request.service = {};
            request.service.name = '';
            const expectedHeaderRequestParams = "service.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service());
            client.innerApiCalls.updateService = stubSimpleCall(expectedResponse);
            const [response] = await client.updateService(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateService without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.UpdateServiceRequest());
            request.service = {};
            request.service.name = '';
            const expectedHeaderRequestParams = "service.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service());
            client.innerApiCalls.updateService = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateService(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.servicedirectory.v1beta1.IService|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateService with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.UpdateServiceRequest());
            request.service = {};
            request.service.name = '';
            const expectedHeaderRequestParams = "service.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateService = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateService(request), expectedError);
            assert((client.innerApiCalls.updateService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteService', () => {
        it('invokes deleteService without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.DeleteServiceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteService = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteService(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteService without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.DeleteServiceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteService = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteService(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteService with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.DeleteServiceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteService = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteService(request), expectedError);
            assert((client.innerApiCalls.deleteService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createEndpoint', () => {
        it('invokes createEndpoint without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.CreateEndpointRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint());
            client.innerApiCalls.createEndpoint = stubSimpleCall(expectedResponse);
            const [response] = await client.createEndpoint(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createEndpoint as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createEndpoint without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.CreateEndpointRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint());
            client.innerApiCalls.createEndpoint = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createEndpoint(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.servicedirectory.v1beta1.IEndpoint|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createEndpoint as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createEndpoint with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.CreateEndpointRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createEndpoint = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createEndpoint(request), expectedError);
            assert((client.innerApiCalls.createEndpoint as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getEndpoint', () => {
        it('invokes getEndpoint without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.GetEndpointRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint());
            client.innerApiCalls.getEndpoint = stubSimpleCall(expectedResponse);
            const [response] = await client.getEndpoint(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getEndpoint as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getEndpoint without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.GetEndpointRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint());
            client.innerApiCalls.getEndpoint = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getEndpoint(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.servicedirectory.v1beta1.IEndpoint|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getEndpoint as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getEndpoint with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.GetEndpointRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getEndpoint = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getEndpoint(request), expectedError);
            assert((client.innerApiCalls.getEndpoint as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateEndpoint', () => {
        it('invokes updateEndpoint without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.UpdateEndpointRequest());
            request.endpoint = {};
            request.endpoint.name = '';
            const expectedHeaderRequestParams = "endpoint.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint());
            client.innerApiCalls.updateEndpoint = stubSimpleCall(expectedResponse);
            const [response] = await client.updateEndpoint(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateEndpoint as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateEndpoint without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.UpdateEndpointRequest());
            request.endpoint = {};
            request.endpoint.name = '';
            const expectedHeaderRequestParams = "endpoint.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint());
            client.innerApiCalls.updateEndpoint = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateEndpoint(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.servicedirectory.v1beta1.IEndpoint|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateEndpoint as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateEndpoint with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.UpdateEndpointRequest());
            request.endpoint = {};
            request.endpoint.name = '';
            const expectedHeaderRequestParams = "endpoint.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateEndpoint = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateEndpoint(request), expectedError);
            assert((client.innerApiCalls.updateEndpoint as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteEndpoint', () => {
        it('invokes deleteEndpoint without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.DeleteEndpointRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteEndpoint = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteEndpoint(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteEndpoint as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteEndpoint without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.DeleteEndpointRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteEndpoint = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteEndpoint(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteEndpoint as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteEndpoint with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.DeleteEndpointRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteEndpoint = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteEndpoint(request), expectedError);
            assert((client.innerApiCalls.deleteEndpoint as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.getIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getIamPolicy without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getIamPolicy with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request), expectedError);
            assert((client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.setIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setIamPolicy without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setIamPolicy with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request), expectedError);
            assert((client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('testIamPermissions', () => {
        it('invokes testIamPermissions without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testIamPermissions = stubSimpleCall(expectedResponse);
            const [response] = await client.testIamPermissions(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes testIamPermissions without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testIamPermissions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPermissions(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.ITestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes testIamPermissions with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request), expectedError);
            assert((client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listNamespaces', () => {
        it('invokes listNamespaces without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListNamespacesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace()),
            ];
            client.innerApiCalls.listNamespaces = stubSimpleCall(expectedResponse);
            const [response] = await client.listNamespaces(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listNamespaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listNamespaces without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListNamespacesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace()),
            ];
            client.innerApiCalls.listNamespaces = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listNamespaces(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.servicedirectory.v1beta1.INamespace[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listNamespaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listNamespaces with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListNamespacesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listNamespaces = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listNamespaces(request), expectedError);
            assert((client.innerApiCalls.listNamespaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listNamespacesStream without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListNamespacesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace()),
            ];
            client.descriptors.page.listNamespaces.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listNamespacesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.servicedirectory.v1beta1.Namespace[] = [];
                stream.on('data', (response: protos.google.cloud.servicedirectory.v1beta1.Namespace) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listNamespaces.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listNamespaces, request));
            assert.strictEqual(
                (client.descriptors.page.listNamespaces.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listNamespacesStream with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListNamespacesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listNamespaces.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listNamespacesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.servicedirectory.v1beta1.Namespace[] = [];
                stream.on('data', (response: protos.google.cloud.servicedirectory.v1beta1.Namespace) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listNamespaces.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listNamespaces, request));
            assert.strictEqual(
                (client.descriptors.page.listNamespaces.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listNamespaces without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListNamespacesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Namespace()),
            ];
            client.descriptors.page.listNamespaces.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.servicedirectory.v1beta1.INamespace[] = [];
            const iterable = client.listNamespacesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listNamespaces.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listNamespaces.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listNamespaces with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListNamespacesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listNamespaces.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listNamespacesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.servicedirectory.v1beta1.INamespace[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listNamespaces.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listNamespaces.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listServices', () => {
        it('invokes listServices without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListServicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service()),
            ];
            client.innerApiCalls.listServices = stubSimpleCall(expectedResponse);
            const [response] = await client.listServices(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServices without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListServicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service()),
            ];
            client.innerApiCalls.listServices = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listServices(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.servicedirectory.v1beta1.IService[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listServices with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListServicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listServices = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listServices(request), expectedError);
            assert((client.innerApiCalls.listServices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServicesStream without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListServicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service()),
            ];
            client.descriptors.page.listServices.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listServicesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.servicedirectory.v1beta1.Service[] = [];
                stream.on('data', (response: protos.google.cloud.servicedirectory.v1beta1.Service) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listServices.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listServices, request));
            assert.strictEqual(
                (client.descriptors.page.listServices.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listServicesStream with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListServicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listServices.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listServicesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.servicedirectory.v1beta1.Service[] = [];
                stream.on('data', (response: protos.google.cloud.servicedirectory.v1beta1.Service) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listServices.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listServices, request));
            assert.strictEqual(
                (client.descriptors.page.listServices.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listServices without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListServicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Service()),
            ];
            client.descriptors.page.listServices.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.servicedirectory.v1beta1.IService[] = [];
            const iterable = client.listServicesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listServices.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listServices.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listServices with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListServicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listServices.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listServicesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.servicedirectory.v1beta1.IService[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listServices.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listServices.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listEndpoints', () => {
        it('invokes listEndpoints without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListEndpointsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint()),
            ];
            client.innerApiCalls.listEndpoints = stubSimpleCall(expectedResponse);
            const [response] = await client.listEndpoints(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listEndpoints as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listEndpoints without error using callback', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListEndpointsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint()),
            ];
            client.innerApiCalls.listEndpoints = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listEndpoints(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.servicedirectory.v1beta1.IEndpoint[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listEndpoints as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listEndpoints with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListEndpointsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listEndpoints = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listEndpoints(request), expectedError);
            assert((client.innerApiCalls.listEndpoints as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listEndpointsStream without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListEndpointsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint()),
            ];
            client.descriptors.page.listEndpoints.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listEndpointsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.servicedirectory.v1beta1.Endpoint[] = [];
                stream.on('data', (response: protos.google.cloud.servicedirectory.v1beta1.Endpoint) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listEndpoints.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listEndpoints, request));
            assert.strictEqual(
                (client.descriptors.page.listEndpoints.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listEndpointsStream with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListEndpointsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listEndpoints.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listEndpointsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.servicedirectory.v1beta1.Endpoint[] = [];
                stream.on('data', (response: protos.google.cloud.servicedirectory.v1beta1.Endpoint) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listEndpoints.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listEndpoints, request));
            assert.strictEqual(
                (client.descriptors.page.listEndpoints.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listEndpoints without error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListEndpointsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint()),
              generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.Endpoint()),
            ];
            client.descriptors.page.listEndpoints.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.servicedirectory.v1beta1.IEndpoint[] = [];
            const iterable = client.listEndpointsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listEndpoints.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listEndpoints.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listEndpoints with error', async () => {
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.servicedirectory.v1beta1.ListEndpointsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listEndpoints.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listEndpointsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.servicedirectory.v1beta1.IEndpoint[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listEndpoints.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listEndpoints.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('endpoint', () => {
            const fakePath = "/rendered/path/endpoint";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                namespace: "namespaceValue",
                service: "serviceValue",
                endpoint: "endpointValue",
            };
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.endpointPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.endpointPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('endpointPath', () => {
                const result = client.endpointPath("projectValue", "locationValue", "namespaceValue", "serviceValue", "endpointValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.endpointPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromEndpointName', () => {
                const result = client.matchProjectFromEndpointName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.endpointPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromEndpointName', () => {
                const result = client.matchLocationFromEndpointName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.endpointPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchNamespaceFromEndpointName', () => {
                const result = client.matchNamespaceFromEndpointName(fakePath);
                assert.strictEqual(result, "namespaceValue");
                assert((client.pathTemplates.endpointPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchServiceFromEndpointName', () => {
                const result = client.matchServiceFromEndpointName(fakePath);
                assert.strictEqual(result, "serviceValue");
                assert((client.pathTemplates.endpointPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEndpointFromEndpointName', () => {
                const result = client.matchEndpointFromEndpointName(fakePath);
                assert.strictEqual(result, "endpointValue");
                assert((client.pathTemplates.endpointPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('namespace', () => {
            const fakePath = "/rendered/path/namespace";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                namespace: "namespaceValue",
            };
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.namespacePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.namespacePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('namespacePath', () => {
                const result = client.namespacePath("projectValue", "locationValue", "namespaceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.namespacePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromNamespaceName', () => {
                const result = client.matchProjectFromNamespaceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.namespacePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromNamespaceName', () => {
                const result = client.matchLocationFromNamespaceName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.namespacePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchNamespaceFromNamespaceName', () => {
                const result = client.matchNamespaceFromNamespaceName(fakePath);
                assert.strictEqual(result, "namespaceValue");
                assert((client.pathTemplates.namespacePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('service', () => {
            const fakePath = "/rendered/path/service";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                namespace: "namespaceValue",
                service: "serviceValue",
            };
            const client = new registrationserviceModule.v1beta1.RegistrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.servicePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.servicePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('servicePath', () => {
                const result = client.servicePath("projectValue", "locationValue", "namespaceValue", "serviceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.servicePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromServiceName', () => {
                const result = client.matchProjectFromServiceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.servicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromServiceName', () => {
                const result = client.matchLocationFromServiceName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.servicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchNamespaceFromServiceName', () => {
                const result = client.matchNamespaceFromServiceName(fakePath);
                assert.strictEqual(result, "namespaceValue");
                assert((client.pathTemplates.servicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchServiceFromServiceName', () => {
                const result = client.matchServiceFromServiceName(fakePath);
                assert.strictEqual(result, "serviceValue");
                assert((client.pathTemplates.servicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
